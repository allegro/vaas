# Generated by Django 5.2.5 on 2025-09-23 09:43

import django.core.validators
import django.db.models.deletion
import re
import simple_history.models
import vaas.manager.fields
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
from vaas.utils.migrations import create_model_if_not_exists_factory

class Migration(migrations.Migration):

    dependencies = [
        ('cluster', '0010_historicaldc_historicallogicalcluster_and_more'),
        ('manager', '0009_auto_20220209_0822'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='backend',
            name='between_bytes_timeout',
            field=models.DecimalField(decimal_places=2, default=1.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(80.0)], verbose_name='Between bytes timeout (s)'),
        ),
        migrations.AlterField(
            model_name='backend',
            name='connect_timeout',
            field=models.DecimalField(decimal_places=2, default=0.3, max_digits=4, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1.0)], verbose_name='Connect timeout (s)'),
        ),
        migrations.AlterField(
            model_name='backend',
            name='first_byte_timeout',
            field=models.DecimalField(decimal_places=2, default=5.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(80.0)], verbose_name='First byte timeout (s)'),
        ),
        migrations.RunPython(
            create_model_if_not_exists_factory(
                table_name='manager_historicalbackend',
                app_label='manager',
                model_name='HistoricalBackend'
            )
        ),
        # HistoricalDirector
        migrations.RunPython(
            create_model_if_not_exists_factory(
                table_name='manager_historicaldirector',
                app_label='manager',
                model_name='HistoricalDirector'
            )
        ),
        # HistoricalProbe
        migrations.RunPython(
            create_model_if_not_exists_factory(
                table_name='manager_historicalprobe',
                app_label='manager',
                model_name='HistoricalProbe'
            )
        ),
        # HistoricalTimeProfile
        migrations.RunPython(
            create_model_if_not_exists_factory(
                table_name='manager_historicaltimeprofile',
                app_label='manager',
                model_name='HistoricalTimeProfile'
            )
        ),
    ]
